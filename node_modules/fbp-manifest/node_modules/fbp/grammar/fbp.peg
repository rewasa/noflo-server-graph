/*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * "2*(3+4)". The parser generated from this grammar then computes their value.
 */

{
  var parser, edges, nodes; 

  parser = this;
  delete parser.exports;
  delete parser.inports;
  delete parser.outports;

  edges = parser.edges = [];

  nodes = {};

  parser.addNode = function (nodeName, comp) {
    if (!nodes[nodeName]) {
      nodes[nodeName] = {}
    }
    if (!!comp.comp) {
      nodes[nodeName].component = comp.comp;
    }
    if (!!comp.meta) {
      var metadata = {};
      for (var i = 0; i < comp.meta.length; i++) {
        var item = comp.meta[i].split('=');
        if (item.length === 1) {
          item = ['routes', item[0]];
        }
        var key = item[0];
        var value = item[1];
        if (key==='x' || key==='y') {
          value = parseFloat(value);
        }
        metadata[key] = value;
      }
      nodes[nodeName].metadata=metadata;
    }
   
  }

  parser.getResult = function () {
    var result = {
      processes: nodes,
      connections: parser.processEdges(),
      exports: parser.exports,
      inports: parser.inports,
      outports: parser.outports
    };

    var validateSchema = parser.validateSchema; // default
    if (typeof(options.validateSchema) !== 'undefined') { validateSchema = options.validateSchema; } // explicit option
    if (validateSchema) {
      if (typeof(tv4) === 'undefined') {
        var tv4 = require("tv4");
      }
      var schema = require("../schema/graph.json");
      var validation = tv4.validateMultiple(result, schema);
      if (!validation.valid) {
        throw new Error("fbp: Did not validate againt graph schema:\n" + JSON.stringify(validation.errors, null, 2));
      }
    }
    result.caseSensitive = options.caseSensitive;
    return result;
  }  

  var flatten = function (array, isShallow) {
    var index = -1,
      length = array ? array.length : 0,
      result = [];

    while (++index < length) {
      var value = array[index];

      if (value instanceof Array) {
        Array.prototype.push.apply(result, isShallow ? value : flatten(value));
      }
      else {
        result.push(value);
      }
    }
    return result;
  }
  
  parser.registerExports = function (priv, pub) {
    if (!parser.exports) {
      parser.exports = [];
    }

    if (!options.caseSensitive) {
      priv = priv.toLowerCase();
      pub = pub.toLowerCase();
    }

    parser.exports.push({private:priv, public:pub});
  }
  parser.registerInports = function (node, port, pub) {
    if (!parser.inports) {
      parser.inports = {};
    }

    if (!options.caseSensitive) {
      pub = pub.toLowerCase();
      port = port.toLowerCase();
    }

    parser.inports[pub] = {process:node, port:port};
  }
  parser.registerOutports = function (node, port, pub) {
    if (!parser.outports) {
      parser.outports = {};
    }

    if (!options.caseSensitive) {
      pub = pub.toLowerCase();
      port = port.toLowerCase();
    }

    parser.outports[pub] = {process:node, port:port};
  }

  parser.registerEdges = function (edges) {

    edges.forEach(function (o, i) {
      parser.edges.push(o);
    });
  }  

  parser.processEdges = function () {   
    var flats, grouped;
    flats = flatten(parser.edges);
    grouped = [];
    var current = {};
    flats.forEach(function (o, i) {
      if (i % 2 !== 0) { 
        var pair = grouped[grouped.length - 1];
        pair.tgt = o.tgt;
        return;
      }
      grouped.push(o);
    });
    return grouped;
  }

  function makeName(s) {
    return s[0] + s[1].join("");
  }
}

start
  = (line)*  { return parser.getResult();  }

line
  = _ "EXPORT=" priv:basePort ":" pub:basePort _ LineTerminator? {return parser.registerExports(priv,pub)}
  / _ "INPORT=" node:node "." port:basePort ":" pub:basePort _ LineTerminator? {return parser.registerInports(node,port,pub)}
  / _ "OUTPORT=" node:node "." port:basePort ":" pub:basePort _ LineTerminator? {return parser.registerOutports(node,port,pub)}
  / comment [\n\r\u2028\u2029]?
  / _ [\n\r\u2028\u2029]
  / _ edges:connection _ LineTerminator? {return parser.registerEdges(edges);}

LineTerminator
  = _ ","? comment? [\n\r\u2028\u2029]?

comment
  = _ "#" (anychar)*

connection 
  = x:source _ "->" _ y:connection { return [x,y]; }
  / destination

source
  = bridge
  / outport
  / iip

destination
  = inport
  / bridge

bridge
  = x:port _ proc:node _ y:port           { return [{"tgt":{process:proc, port:x}},{"src":{process:proc, port:y}}]; }
  / x:portWithIndex _ proc:node _ y:port  { return [{"tgt":{process:proc, port:x.port, index:x.index}},{"src":{process:proc, port:y}}]; }
  / x:port _ proc:node _ y:portWithIndex  { return [{"tgt":{process:proc, port:x}},{"src":{process:proc, port:y.port, index:y.index}}]; }
  / x:portWithIndex _ proc:node _ y:portWithIndex  { return [{"tgt":{process:proc, port:x.port, index:x.index}},{"src":{process:proc, port:y.port, index:y.index}}]; }

outport
  = proc:node _ port:port  { return {"src":{process:proc, port:port}} }  
  / proc:node _ port:portWithIndex  { return {"src":{process:proc, port:port.port, index: port.index}} }

iip
  = "'" iip:(iipchar)* "'"        { return {"data":iip.join("")} }

inport 
  = port:port _ proc:node  { return {"tgt":{process:proc, port:port}} } 
  / port:portWithIndex _ proc:node  { return {"tgt":{process:proc, port:port.port, index: port.index}} }

node
  = node:([a-zA-Z_][a-zA-Z0-9_\-]*) comp:component? { if(comp){parser.addNode(makeName(node),comp);}; return makeName(node)}

component
  = "(" comp:([a-zA-Z/\-0-9_]*)? meta:compMeta? ")" { var o = {}; comp ? o.comp = comp.join("") : o.comp = ''; meta ? o.meta = meta.join("").split(',') : null; return o; }

compMeta 
  = ":" meta:[a-zA-Z/=_,0-9]+  {return meta}

port
  = portname:basePort __ {return options.caseSensitive ? portname : portname.toLowerCase()}

portWithIndex
  = portname:basePort "[" portindex:[0-9]+ "]"  __ {return { port: options.caseSensitive? portname : portname.toLowerCase(), index: parseInt(portindex.join('')) }}

basePort
  = portname:([a-zA-Z_][a-zA-Z.0-9_]*) {return makeName(portname)}

anychar
  = [^\n\r\u2028\u2029]

iipchar
  = [\\]['] { return "'"; }
  / [^']

_
  = (" "*)?

__
  = " "+
